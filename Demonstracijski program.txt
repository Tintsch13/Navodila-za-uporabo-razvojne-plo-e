<body>//-----Hardware-------------
//User button
#define BTN 9
//RGB LED
#define LED_R 7
#define LED_G 10
#define LED_B 4
//Ambient Light Sensor
#define LX_A 1
#define LX_B 3
#define LX_OUT 0
//I2C
#define SDA 5
#define SCL 6
//UART
#define RX 20
#define TX 21

#define BUFFER_SIZE 100  




//-----Global variables-----
const int led_R_channel = 0;
const int led_G_channel = 1;
const int led_B_channel = 2;
const int pwm_frequency = 5000;//Hz
const int pwm_resolution = 12;//bit
bool lastState, ledState = LOW;
int mode, state = 0;
long previousMillis = 0; 
const unsigned long ledOnTime = 500;  
const unsigned long ledOffTime = 100;  
unsigned long korak[BUFFER_SIZE];
float vrednosti[BUFFER_SIZE];
int trenutniIndex = 0;
unsigned long casGumba = 0;
unsigned long casZacetkaGumba = 0;


void setup() {
  pinMode(BTN,INPUT);

  pinMode(LED_R,OUTPUT);
  pinMode(LED_G,OUTPUT);
  pinMode(LED_B,OUTPUT);

  ledcSetup(led_R_channel, pwm_frequency, pwm_resolution);
  ledcAttachPin(LED_R, led_R_channel);
  ledcWrite(led_R_channel, 0);

  ledcSetup(led_G_channel, pwm_frequency, pwm_resolution);
  ledcAttachPin(LED_G, led_G_channel);
  ledcWrite(led_G_channel, 0);

  ledcSetup(led_B_channel, pwm_frequency, pwm_resolution);
  ledcAttachPin(LED_B, led_B_channel);
  ledcWrite(led_B_channel, 0);

  pinMode(LX_A,INPUT);
  pinMode(LX_B,INPUT);
  pinMode(LX_OUT,INPUT);

  Serial.begin(9600);
  delay(1000);
  Serial.println("Erasmus+\nGEMS\nAmethyst\nv0.0\n\n");
}

void loop() {
  if (btn() != lastState) {
    casZacetkaGumba = millis();
    lastState = btn();
    if(btn() == HIGH){
      mode = (mode + 1) % 3;
    }    
  }
  casGumba = millis() - casZacetkaGumba;
 
  if(millis() < 10000 || (btn() && casGumba >= 3000)){
    rgb(750, 0, 450);
    mode = 0;
  }

  else{
    if(mode == 2){
      delay(100);
      float povp = trenutnaOsvetljenost(mode);
      if (povp > 2500) {
      rgb(0, 4096, 250);
      }
      else if(povp > 1500){
        rgb(4096, 1000, 0);
      }
      else{
        rgb(4096, 0, 0);
      }
    }

    else if(mode == 1){
      delay(100);
      float povp = trenutnaOsvetljenost(mode);
      if (povp > 1500 && povp < 2500) {
      rgb(0, 2000, 150);
      }
      else if((povp > 750 && povp < 1500) || (povp > 2500 && povp < 3000)){
        rgb(2000, 1000, 0);
      }
      else{
        rgb(2000, 0, 0);
      }
    }
    else{
      unsigned long currentMillis = millis();

      if (state == 0) {
        if (lx(mode) < 50) {
        rgb(0, 40, 0);
        }
        else if (lx(mode) < 500) {
        rgb(40, 5, 0);
        }
        else{
          rgb(40, 0, 0);
        }
        
        if (currentMillis - previousMillis >= ledOnTime) {
          previousMillis = currentMillis;
          state = 1; 
        }
      } else if (state == 1) {
        rgb(0, 0, 0);  
        if (currentMillis - previousMillis >= ledOffTime) {
          previousMillis = currentMillis;
          Serial.println(lx(mode));  
          state = 0; 
        }
      }
    }
  }



}

int btn(){
  return !digitalRead(BTN);
}

void rgb(int R, int G, int B){
  ledcWrite(led_R_channel, R);
  ledcWrite(led_G_channel, G);
  ledcWrite(led_B_channel, B);
}

int lx(int mode){
  switch(mode){
    case 0:
      pinMode(LX_A,INPUT);
      pinMode(LX_B,INPUT);
    break;
    case 1:
      pinMode(LX_A,INPUT);
      pinMode(LX_B,OUTPUT);
      digitalWrite(LX_B, LOW);
    break;
    case 2:
      pinMode(LX_A,OUTPUT);
      digitalWrite(LX_A, LOW);
      pinMode(LX_B,INPUT);
    break;
    default:
      pinMode(LX_A,INPUT);
      pinMode(LX_B,INPUT);
  }

  return analogRead(LX_OUT);
}

float trenutnaOsvetljenost(int mode) {

  float trenutnaVrednost = lx(mode);
  unsigned long trenutniCas = millis();
  unsigned long zajemniInterval = trenutniCas - 10000;
  float sum = 0;
  int count = 0;

  korak[trenutniIndex] = trenutniCas;
  vrednosti[trenutniIndex] = trenutnaVrednost;
  trenutniIndex = (trenutniIndex + 1) % BUFFER_SIZE;
  
  for (int i = 0; i < BUFFER_SIZE; i++) {
    if (korak[i] >= zajemniInterval) {
      sum += vrednosti[i];
      count++;
    }
  }

  float povprecje = sum / count;
  Serial.println(povprecje);

  return povprecje;
}
